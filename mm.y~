/*
 * mm-naive.c - The fastest, least memory-efficient malloc package.
 * In this naive approach, a block is allocated by simply incrementing
 * the brk pointer.  A block is pure payload. There are no headers or
 * footers.  Blocks are never coalesced or reused. Realloc is
 * implemented directly using mm_malloc and mm_free.
 *
 * NOTE TO STUDENTS: Replace this header comment with your own header
 * comment that gives a high level description of your solution.
 */
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <unistd.h>
#include <string.h>

#include "mm.h"
#include "memlib.h"

//#define HEAP_SIZE 1000000  //mem_heapsize()
//#define header_size sizeof(header)

/*********************************************************
 * NOTE TO STUDENTS: Before you do anything else, please
 * provide your team information in the following struct.
 ********************************************************/
team_t team = {
    /* Team name */
    "csoteam",
    /* First member's full name */
    "Jinyang Li",
    /* First member's email address */
    "jl123@nyu.edu",
    /* Second member's full name (leave blank if none) */
    "",
    /* Second member's email address (leave blank if none) */
    ""
};


/*
* mm.c - malloc using segregated list
* KAIST
* Tony Kim
*
* In this approach,
* Every block has a header and a footer
* in which header contains reallocation information, size, and allocation info
* and footer contains size and allocation info.
* Free list are tagged to the segregated list.
* Therefore all free block contains pointer to the predecessor and successor.
* The segregated list headers are organized by 2^k size.
*
*/


/* single word (4) or double word (8) alignment */
//#define ALIGNMENTT 16
/* rounds up to the nearest multiple of ALIGNMENT */
//#define ALIGNN(size) (((size) + (ALIGNMENTT-1)) & ~0x7)
// My additional Macros
#define WSIZE 8 // word and header/footer size (bytes)
#define DSIZE 16 // double word size (bytes)
#define INITCHUNKSIZE (1<<6)
#define CHUNKSIZE (1<<12)//+(1<<7)
#define LISTLIMIT 20
#define REALLOC_BUFFER (1<<7)
#define MAX(x, y) ((x) > (y) ? (x) : (y))
#define MIN(x, y) ((x) < (y) ? (x) : (y))
// Pack a size and allocated bit into a word
#define PACK(size, alloc) ((size) | (alloc))
// Read and write a word at address p
#define GET(p) (*(unsigned int *)(p))
#define PUT(p, val) (*(unsigned int *)(p) = (val) | GET_TAG(p))
#define PUT_NOTAG(p, val) (*(unsigned int *)(p) = (val))
// Store predecessor or successor pointer for free blocks
#define SET_PTR(p, ptr) (*(unsigned long *)(p) = (unsigned long)(ptr))
// Read the size and allocation bit from address p
#define GET_SIZE(p) (GET(p) & ~0x7)
#define GET_ALLOC(p) (GET(p) & 0x1)
#define GET_TAG(p) (GET(p) & 0x2)
#define SET_RATAG(p) (GET(p) |= 0x2)
#define REMOVE_RATAG(p) (GET(p) &= ~0x2)
// Address of block's header and footer
#define HDRP(ptr) ((char *)(ptr) - WSIZE)
#define FTRP(ptr) ((char *)(ptr) + GET_SIZE(HDRP(ptr)) - DSIZE)
// Address of (physically) next and previous blocks
#define NEXT_BLKP(ptr) ((char *)(ptr) + GET_SIZE((char *)(ptr) - WSIZE))
#define PREV_BLKP(ptr) ((char *)(ptr) - GET_SIZE((char *)(ptr) - DSIZE))
// Address of free block's predecessor and successor entries
#define PRED_PTR(ptr) ((char *)(ptr))
#define SUCC_PTR(ptr) ((char *)(ptr) + WSIZE)
// Address of free block's predecessor and successor on the segregated list
#define PRED(ptr) (*(char **)(ptr))
#define SUCC(ptr) (*(char **)(SUCC_PTR(ptr)))
// End of my additional macros
// Global var
void *segregated_free_lists[LISTLIMIT];
// Functions
static void *extend_heap(size_t size);
static void *coalesce(void *ptr);
static void *place(void *ptr, size_t asize);
static void insert_node(void *ptr, size_t size);
static void delete_node(void *ptr);
//static void checkheap(int verbose);
///////////////////////////////// Block information /////////////////////////////////////////////////////////
/*
A : Allocated? (1: true, 0:false)
RA : Reallocation tag (1: true, 0:false)
< Allocated Block >
31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
Header : | size of the block | | | A|
bp ---> +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
| |
| |
. Payload and padding .
. .
. .
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
Footer : | size of the block | | A|
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
< Free block >
31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
Header : | size of the block | |RA| A|
bp ---> +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
| pointer to its predecessor in Segregated list |
bp+WSIZE--> +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
| pointer to its successor in Segregated list |
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
. .
. .
. .
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
Footer : | size of the block | | A|
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
*/
///////////////////////////////// End of Block information /////////////////////////////////////////////////////////
//////////////////////////////////////// Helper functions //////////////////////////////////////////////////////////
static void *extend_heap(size_t size)
{
void *ptr;


size_t asize; // Adjusted size
asize = ALIGN(size + SIZE_T_SIZE);
if ((ptr = mem_sbrk(asize)) == (void *)-1)
return NULL;
// Set headers and footer
PUT_NOTAG(HDRP(ptr), PACK(asize, 0));
PUT_NOTAG(FTRP(ptr), PACK(asize, 0));
PUT_NOTAG(HDRP(NEXT_BLKP(ptr)), PACK(0, 1));
insert_node(ptr, asize);
return coalesce(ptr);
}
static void insert_node(void *ptr, size_t size) {
int list = 0;
void *search_ptr = ptr;
void *insert_ptr = NULL;
// Select segregated list
while ((list < LISTLIMIT - 1) && (size > 1)) {
size >>= 1;
list++;
}
// Keep size ascending order and search
search_ptr = segregated_free_lists[list];
while ((search_ptr != NULL) && (size > GET_SIZE(HDRP(search_ptr)))) {
insert_ptr = search_ptr;
search_ptr = PRED(search_ptr);
}
// Set predecessor and successor
if (search_ptr != NULL) {
if (insert_ptr != NULL) {
SET_PTR(PRED_PTR(ptr), search_ptr);
SET_PTR(SUCC_PTR(search_ptr), ptr);
SET_PTR(SUCC_PTR(ptr), insert_ptr);
SET_PTR(PRED_PTR(insert_ptr), ptr);
} else {
SET_PTR(PRED_PTR(ptr), search_ptr);
SET_PTR(SUCC_PTR(search_ptr), ptr);
SET_PTR(SUCC_PTR(ptr), NULL);
segregated_free_lists[list] = ptr;
}
} else {
if (insert_ptr != NULL) {
SET_PTR(PRED_PTR(ptr), NULL);
SET_PTR(SUCC_PTR(ptr), insert_ptr);
SET_PTR(PRED_PTR(insert_ptr), ptr);
} else {
SET_PTR(PRED_PTR(ptr), NULL);
SET_PTR(SUCC_PTR(ptr), NULL);
segregated_free_lists[list] = ptr;
}
}
return;
}
static void delete_node(void *ptr) {
int list = 0;
size_t size = GET_SIZE(HDRP(ptr));
// Select segregated list
while ((list < LISTLIMIT - 1) && (size > 1)) {
size >>= 1;
list++;
}
if (PRED(ptr) != NULL) {
if (SUCC(ptr) != NULL) {
SET_PTR(SUCC_PTR(PRED(ptr)), SUCC(ptr));
SET_PTR(PRED_PTR(SUCC(ptr)), PRED(ptr));
} else {
SET_PTR(SUCC_PTR(PRED(ptr)), NULL);
segregated_free_lists[list] = PRED(ptr);
}
} else {
if (SUCC(ptr) != NULL) {
SET_PTR(PRED_PTR(SUCC(ptr)), NULL);
} else {
segregated_free_lists[list] = NULL;
}
}
return;
}
static void *coalesce(void *ptr)
{
size_t prev_alloc = GET_ALLOC(HDRP(PREV_BLKP(ptr)));
size_t next_alloc = GET_ALLOC(HDRP(NEXT_BLKP(ptr)));
size_t size = GET_SIZE(HDRP(ptr));
// Do not coalesce with previous block if the previous block is tagged with Reallocation tag
if (GET_TAG(HDRP(PREV_BLKP(ptr))))
prev_alloc = 1;
if (prev_alloc && next_alloc) { // Case 1
return ptr;
}
else if (prev_alloc && !next_alloc) { // Case 2
delete_node(ptr);
delete_node(NEXT_BLKP(ptr));
size += GET_SIZE(HDRP(NEXT_BLKP(ptr)));
PUT(HDRP(ptr), PACK(size, 0));
PUT(FTRP(ptr), PACK(size, 0));
} else if (!prev_alloc && next_alloc) { // Case 3
delete_node(ptr);
delete_node(PREV_BLKP(ptr));
size += GET_SIZE(HDRP(PREV_BLKP(ptr)));
PUT(FTRP(ptr), PACK(size, 0));
PUT(HDRP(PREV_BLKP(ptr)), PACK(size, 0));
ptr = PREV_BLKP(ptr);
} else { // Case 4
delete_node(ptr);
delete_node(PREV_BLKP(ptr));
delete_node(NEXT_BLKP(ptr));
size += GET_SIZE(HDRP(PREV_BLKP(ptr))) + GET_SIZE(HDRP(NEXT_BLKP(ptr)));
PUT(HDRP(PREV_BLKP(ptr)), PACK(size, 0));
PUT(FTRP(NEXT_BLKP(ptr)), PACK(size, 0));
ptr = PREV_BLKP(ptr);
}
insert_node(ptr, size);
return ptr;
}
static void *place(void *ptr, size_t asize)
{
size_t ptr_size = GET_SIZE(HDRP(ptr));
size_t remainder = ptr_size - asize;
delete_node(ptr);
if (remainder <= DSIZE * 2) {
// Do not split block
PUT(HDRP(ptr), PACK(ptr_size, 1));
PUT(FTRP(ptr), PACK(ptr_size, 1));
}
else if (asize >= 100) {
// Split block
PUT(HDRP(ptr), PACK(remainder, 0));
PUT(FTRP(ptr), PACK(remainder, 0));
PUT_NOTAG(HDRP(NEXT_BLKP(ptr)), PACK(asize, 1));
PUT_NOTAG(FTRP(NEXT_BLKP(ptr)), PACK(asize, 1));
insert_node(ptr, remainder);
return NEXT_BLKP(ptr);
}
else {
// Split block
PUT(HDRP(ptr), PACK(asize, 1));
PUT(FTRP(ptr), PACK(asize, 1));
PUT_NOTAG(HDRP(NEXT_BLKP(ptr)), PACK(remainder, 0));
PUT_NOTAG(FTRP(NEXT_BLKP(ptr)), PACK(remainder, 0));
insert_node(NEXT_BLKP(ptr), remainder);
}
return ptr;
}
//////////////////////////////////////// End of Helper functions ////////////////////////////////////////
/*
* mm_init - initialize the malloc package.
* Before calling mm_malloc, mm_realloc, or mm_free,
* the application program calls mm_init to perform any necessary initializations,
* such as allocating the initial heap area.
*
* Return value : -1 if there was a problem, 0 otherwise.
*/
int mm_init(void)
{
int list;
char *heap_start; // Pointer to beginning of heap
// Initialize segregated free lists
for (list = 0; list < LISTLIMIT; list++) {
segregated_free_lists[list] = NULL;
}
// Allocate memory for the initial empty heap
if ((long)(heap_start = mem_sbrk(4 * WSIZE)) == -1)
return -1;
PUT_NOTAG(heap_start, 0); /* Alignment padding */
PUT_NOTAG(heap_start + (1 * WSIZE), PACK(DSIZE, 1)); /* Prologue header */
PUT_NOTAG(heap_start + (2 * WSIZE), PACK(DSIZE, 1)); /* Prologue footer */
PUT_NOTAG(heap_start + (3 * WSIZE), PACK(0, 1)); /* Epilogue header */
if (extend_heap(INITCHUNKSIZE) == NULL)
return -1;
return 0;
}
/*
* mm_malloc - Allocate a block by incrementing the brk pointer.
* Always allocate a block whose size is a multiple of the alignment.
*
* Role :
* 1. The mm_malloc routine returns a pointer to an allocated block payload.
* 2. The entire allocated block should lie within the heap region.
* 3. The entire allocated block should overlap with any other chunk.
*
* Return value : Always return the payload pointers that are alligned to 8 bytes.
*/
void *mm_malloc(size_t size)
{
size_t asize; /* Adjusted block size */
size_t extendsize; /* Amount to extend heap if no fit */
void *ptr = NULL; /* Pointer */
// Ignore size 0 cases
if (size == 0)
return NULL;


// Align block size
if (size <= DSIZE) {
asize = 2 * DSIZE;
} else {
asize = ALIGN(size+DSIZE);
}

int list = 0;
size_t searchsize = asize;
// Search for free block in segregated list
while (list < LISTLIMIT) {
if ((list == LISTLIMIT - 1) || ((searchsize <= 1) && (segregated_free_lists[list] != NULL))) {
ptr = segregated_free_lists[list];
// Ignore blocks that are too small or marked with the reallocation bit
while ((ptr != NULL) && ((asize > GET_SIZE(HDRP(ptr))) || (GET_TAG(HDRP(ptr)))))
{
ptr = PRED(ptr);
}
if (ptr != NULL)
break;
}
searchsize >>= 1;
list++;
}
// if free block is not found, extend the heap
if (ptr == NULL) {
extendsize = MAX(asize, CHUNKSIZE);
if ((ptr = extend_heap(extendsize)) == NULL)
return NULL;
}
// Place and divide block
ptr = place(ptr, asize);
// Return pointer to newly allocated block
return ptr;
}
/*
* mm_free - Freeing a block does nothing.
*
* Role : The mm_free routine frees the block pointed to by ptr
*
* Return value : returns nothing
*/
void mm_free(void *ptr)
{
size_t size = GET_SIZE(HDRP(ptr));
REMOVE_RATAG(HDRP(NEXT_BLKP(ptr)));
PUT(HDRP(ptr), PACK(size, 0));
PUT(FTRP(ptr), PACK(size, 0));
insert_node(ptr, size);
coalesce(ptr);
return;
}



#if 0
void *mm_realloc(void *ptr, size_t size)
{
void *new_ptr = ptr; /* Pointer to be returned */
size_t new_size = size; /* Size of new block */
int remainder; /* Adequacy of block sizes */
int extendsize; /* Size of heap extension */
int block_buffer; /* Size of block buffer */
// Ignore size 0 cases
if (size == 0)
return NULL;
// Align block size
if (new_size <= DSIZE) {
new_size = 2 * DSIZE;
} else {
new_size = ALIGN(size+DSIZE);
}
/* Add overhead requirements to block size */
new_size += REALLOC_BUFFER;
/* Calculate block buffer */
block_buffer = GET_SIZE(HDRP(ptr)) - new_size;
/* Allocate more space if overhead falls below the minimum */
if (block_buffer < 0) {
/* Check if next block is a free block or the epilogue block */
if (!GET_ALLOC(HDRP(NEXT_BLKP(ptr))) || !GET_SIZE(HDRP(NEXT_BLKP(ptr)))) {
remainder = GET_SIZE(HDRP(ptr)) + GET_SIZE(HDRP(NEXT_BLKP(ptr))) - new_size;
if (remainder < 0) {
extendsize = MAX(-remainder, CHUNKSIZE);
if (extend_heap(extendsize) == NULL)
return NULL;
remainder += extendsize;
}
delete_node(NEXT_BLKP(ptr));
// Do not split block
PUT_NOTAG(HDRP(ptr), PACK(new_size + remainder, 1));
PUT_NOTAG(FTRP(ptr), PACK(new_size + remainder, 1));
} else {
new_ptr = mm_malloc(new_size - DSIZE);
memcpy(new_ptr, ptr, MIN(size, new_size));
mm_free(ptr);
}
block_buffer = GET_SIZE(HDRP(new_ptr)) - new_size;
}
// Tag the next block if block overhead drops below twice the overhead
if (block_buffer < 2 * REALLOC_BUFFER)
SET_RATAG(HDRP(NEXT_BLKP(new_ptr)));
// Return the reallocated block
return new_ptr;
}


#endif


#if 0

/*
* mm_realloc - Implemented simply in terms of mm_malloc and mm_free
*
* Role : The mm_realloc routine returns a pointer to an allocated
* region of at least size bytes with constraints.
*
* I used https://github.com/htian/malloc-lab/blob/master/mm.c source idea to maximize utilization
* by using reallocation tags
* in reallocation cases (realloc-bal.rep, realloc2-bal.rep)
*/
void *mm_realloc(void *ptr, size_t size)
{
void *new_ptr = ptr; /* Pointer to be returned */
size_t new_size = size; /* Size of new block */
int remainder; /* Adequacy of block sizes */
int extendsize; /* Size of heap extension */
int block_buffer; /* Size of block buffer */
// Ignore size 0 cases
if (size == 0)
return NULL;


// Align block size
if (new_size <= DSIZE) {
new_size = 2 * DSIZE;
} else {
new_size = ALIGN(size+DSIZE);
}


//new_size = ALIGN(DSIZE + SIZE_T_SIZE);


/* Add overhead requirements to block size */
new_size += REALLOC_BUFFER;
/* Calculate block buffer */
block_buffer = GET_SIZE(HDRP(ptr)) - new_size;
/* Allocate more space if overhead falls below the minimum */
if (block_buffer < 0) {
/* Check if next block is a free block or the epilogue block */
if (!GET_ALLOC(HDRP(NEXT_BLKP(ptr))) || !GET_SIZE(HDRP(NEXT_BLKP(ptr)))) {
remainder = GET_SIZE(HDRP(ptr)) + GET_SIZE(HDRP(NEXT_BLKP(ptr))) - new_size;
if (remainder < 0) {
extendsize = MAX(-remainder, CHUNKSIZE);
if (extend_heap(extendsize) == NULL)
return NULL;
remainder += extendsize;
}
delete_node(NEXT_BLKP(ptr));
// Do not split block
PUT_NOTAG(HDRP(ptr), PACK(new_size + remainder, 1));
PUT_NOTAG(FTRP(ptr), PACK(new_size + remainder, 1));
} else {
new_ptr = mm_malloc(new_size - DSIZE);
memcpy(new_ptr, ptr, MIN(size, new_size));
mm_free(ptr);
}
block_buffer = GET_SIZE(HDRP(new_ptr)) - new_size;
}
// Tag the next block if block overhead drops below twice the overhead
if (block_buffer < 2 * REALLOC_BUFFER)
SET_RATAG(HDRP(NEXT_BLKP(new_ptr)));
// Return the reallocated block
return new_ptr;
}

#endif

#if 0


//header *hp_head;
header *f_head;

void place(header* bp,size_t size, char is_free){
        header *hp_head = (header*) bp;
        hp_head->sz = size;
        hp_head->free = is_free;
        hp_head->prev = NULL;
        hp_head->next = NULL;
        f_head = hp_head;

        footer * hp_foot = (footer*) (bp+size-sizeof(footer));
        hp_foot->free = is_free;
        hp_foot->sz = size;
}

header* search(size_t size){
	while (f_head != NULL){
	// 	printf("working1");
		if(f_head->sz >= size){
			return f_head; //+ SIZE_T_SIZE;
			//return f_head;
		}
		f_head = f_head->next;
	//	printf("working3");
	}	
	return NULL;
}

header *split(size_t size, header* head){
	size_t remainder = head->sz - size;
	place(head, remainder, 1);
	return head+size;// + SIZE_T_SIZE;
	//return rem;
}

/* 
 * mm_init - initialize the malloc package.
 */
int mm_init(void){
	char *bp;
	//header * hp_head = (header*) mem_heap_lo();
	bp = mem_sbrk(ALIGN(sizeof(header)+sizeof(footer)+100));
	size_t size = mem_heap_hi() - mem_heap_lo();
	//printf("\nsize is %lu\n", size);
	if((long)bp == -1){
		return -1;
	}
	else{
	header *hp_head = (header*) bp;
	hp_head->sz = size;
	hp_head->free = 1;	
	hp_head->prev = NULL;
	hp_head->next = NULL;
	f_head = hp_head;
	
	footer * hp_foot = (footer*) (bp+size-sizeof(footer));
	hp_foot->free = 1;
	hp_foot->sz = size;
	
	//printf("HEAP_SIZE: %d", HEAP_SIZE);
	//printf("hp_head size: %lu", hp_head->sz);
	//printf("f_head size: %lu", f_head->sz);
	return 0;
	}
}


/* 
 * mm_malloc - Allocate a block by incrementing the brk pointer.
 *     Always allocate a block whose size is a multiple of the alignment.
 */
void *mm_malloc(size_t size)
{
#if 0
	printf("size is %lu", size);
	int newsize = ALIGN(size + sizeof(header) + sizeof(footer) + SIZE_T_SIZE);
	header *loc = search(newsize);
	printf("  loc is of size %lu   ", loc->sz);
	if (loc != NULL){
		printf("\nin\n");
		//mem_sbrk(newsize);
		//place(loc, newsize, 0);
		size_t rem = loc->sz - newsize;
		//size_t rem = loc->sz - (size + sizeof(header));
		if (rem > ALIGN(sizeof(header) + SIZE_T_SIZE)){
			split(newsize, loc);
		}
		loc->prev = loc->next;
		return (void*)(char*)loc; //+ SIZE_T_SIZE);
	}
	else{
#endif
		if(mem_sbrk(newsize) == -1){
			printf("in111");
			return NULL;
		}
		else{
			place(loc,newsize, 0);
			printf("in");
		}
	


/*	
    int newsize = ALIGN(size + SIZE_T_SIZE);
    void *p = mem_sbrk(newsize);
    if (p == (void *)-1)
	return NULL;
    else {
        *(size_t *)p = size;
        return (void *)((char *)p + SIZE_T_SIZE);
    }
	
*/
}

void detach(header *ptr){
	ptr->prev->next = ptr->next;
}

void merge(header *left, header *right){
	left->sz = (left->sz) + right->sz;
	left->free = 1;
}

void insert(header *ptr){
	ptr->next = f_head;
        f_head = ptr;

}

/*
 * mm_free - Freeing a block does nothing.
 */
void mm_free(void *ptr)
{
#if 0
	header *b1 = (header*)ptr + sizeof(header);
	header *b2 = (header*)(char*)b1+b1->sz;
	
	if (b2->free == 0){
		b1->free = 1;
	}
	else{
		b1->sz = sizeof(header) + b2->sz;
		b1->free = 1;
	}	
	
	//printf("p_value %lu", b2->sz);
	
	//header *pr= (header*)(char *) (p + p->sz);
	//printf("p_value %lu", p->sz);

#endif
	//printf("value: %lu\n", distance);
#if 0
	printf("fine");
	if (b2->free == 0){
		b1->free = 1;
		printf("hahaha");
		//insert(b1);
	}
	else{
		b1->sz = sizeof(header) + b2->sz;
		b1->free = 1;
		/*
		printf("one\n");
		detach(b2);
		printf("two\n");
		merge(b1, b2);
		printf("three\n");
		insert(b1);
		printf("four\n");
		*/
#endif
#if 0 
	if ((ptr+(ptr->sz))->free == 1){
                printf("one\n");
                detach(ptr + (ptr->sz));
                printf("two\n");
                merge(ptr, ptr + (ptr->sz));
                printf("three\n");
                insert(ptr);
                printf("four\n");
        }
#endif
	/*
	if(ptr->next->free == 1){
		detach();
		merge();
	}
	*/

}

#endif


/*
 * mm_realloc - Implemented simply in terms of mm_malloc and mm_free
 */
void *mm_realloc(void *ptr, size_t size)
{
    void *oldptr = ptr;
    void *newptr;
    size_t copySize;
    
    newptr = mm_malloc(size);
    if (newptr == NULL)
      return NULL;
    copySize = *(size_t *)((char *)oldptr - SIZE_T_SIZE);
    if (size < copySize)
      copySize = size;
    memcpy(newptr, oldptr, copySize);
    mm_free(oldptr);
    return newptr;
}

 

void mm_checkheap(int verbose) 
{
	return;
}










